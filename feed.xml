<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://pashagolub.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pashagolub.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-07T11:16:41+00:00</updated><id>https://pashagolub.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal page with the blog and CV. </subtitle><entry><title type="html">FOSDEM 2025: A PostgreSQL Community Tradition</title><link href="https://pashagolub.github.io/blog/2025/fosdem2025/" rel="alternate" type="text/html" title="FOSDEM 2025: A PostgreSQL Community Tradition"/><published>2025-02-07T06:00:00+00:00</published><updated>2025-02-07T06:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2025/fosdem2025</id><content type="html" xml:base="https://pashagolub.github.io/blog/2025/fosdem2025/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>FOSDEM has long been a key event for the PostgreSQL community, and 2025 was no exception. Every year, PostgreSQL developers, contributors, and users worldwide gather in Brussels for a week packed with talks, meetings, and discussions. Our community has a strong tradition at FOSDEM, with a dedicated developer room, a booth, and numerous side events</p> <p>One of the most recognizable FOSDEM traditions is <strong>FOSDEM Weather</strong> — a perfect mix of rain, cold, and clouds that always greets us in Brussels. Over the years, we even started selling PostgreSQL-branded umbrellas at our booth, and you could track the weather by watching the sales spike! But this year, for the first time in a while, the weather was <strong>sunny and perfect</strong> — so we joked that the weather was trying to lower our sales. 😄</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/postgres-booth-fosdem-2025-480.webp 480w,/assets/img/postgres-booth-fosdem-2025-800.webp 800w,/assets/img/postgres-booth-fosdem-2025-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/postgres-booth-fosdem-2025.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="a-busy-week-for-postgresql">A Busy Week for PostgreSQL</h2> <p>FOSDEM week is always busy for the PostgreSQL community, with multiple events happening alongside the main conference:</p> <h3 id="p2d2-conference"><strong>P2D2 Conference</strong></h3> <p>Held earlier in the week, the <strong>Prague PostgreSQL Developer Day (P2D2)</strong> is a major PostgreSQL event that gathers experts for in-depth discussions. For a detailed experience of the event, check out <a href="https://www.cybertec-postgresql.com/en/my-first-experience-at-p2d2/">Ants Aasma’s blog post</a>.</p> <h3 id="postgresql-developer-meeting"><strong>PostgreSQL Developer Meeting</strong></h3> <p>On <strong>Thursday, January 30th</strong>, PostgreSQL core developers and contributors held a private developer meeting to discuss ongoing projects, significant challenges, and future PostgreSQL development. More details can be found on the <a href="https://2025.fosdempgday.org/devmeeting/">official event page</a>.</p> <h3 id="fosdem-pgday"><strong>FOSDEM PGDay</strong></h3> <p>On <strong>Friday, January 31st</strong>, we had <strong>FOSDEM PGDay</strong>, a full-day PostgreSQL conference. The schedule featured talks on a wide range of PostgreSQL topics, from performance tuning to backups and new features. The complete schedule is available <a href="https://www.postgresql.eu/events/fosdem2025/schedule/">here</a>.</p> <h3 id="postgresql-devroom-at-fosdem"><strong>PostgreSQL Devroom at FOSDEM</strong></h3> <p>The <strong>PostgreSQL Devroom</strong> took place on <strong>Sunday, February 2nd</strong>, featuring sessions on database performance, replication, analytics, AI/ML, and more. This year, we had great discussions about PostgreSQL internals, best practices, and real-world use cases. You can find the complete session list <a href="https://fosdem.org/2025/schedule/track/postgresql/">here</a>. The talk records will be available shortly.</p> <h2 id="community--networking">Community &amp; Networking</h2> <p>FOSDEM is not just about talks—it’s about meeting people, sharing ideas, and strengthening the community. As usual, there were plenty of social events and informal gatherings.</p> <p>One of the highlights for me was attending the <strong>Google Summer of Code (GSoC) event on Saturday evening</strong>, where I had the chance to meet new and long-time friends. GSoC continues to be an essential program for PostgreSQL, and it was great to see the enthusiasm for mentoring and open-source contributions. Right now, PostgreSQL org is gathering <a href="https://wiki.postgresql.org/wiki/GSoC_2025">project ideas and mentors</a>. If you want to be a mentor, you still have time until February 10th!</p> <h2 id="contributions--recognition">Contributions &amp; Recognition</h2> <p>This year’s central topic of discussion was <strong>contributions</strong>: what counts as a contribution, how we measure it, and how we recognize non-code contributions. Our community relies on the work of many people beyond just developers: event organizers, documentation writers, speakers, translators, and advocates all play a massive role in making PostgreSQL what it is today.</p> <p>To help highlight and recognize these contributions, we put a lot of effort into building our new website: <strong><a href="https://postgres-contrib.org/">postgres-contrib.org</a></strong>. This platform helps track contributions and provides a way to nominate and recognize those who support the community.</p> <h2 id="closing-thoughts">Closing Thoughts</h2> <p>The <strong>spirit of the PostgreSQL community</strong> is what makes FOSDEM so special every year. I want to extend my <strong>huge thanks</strong> to all the volunteers, organizers, and contributors who made this event possible.</p> <p>Special thanks to:</p> <ul> <li>The <a href="https://2025.fosdempgday.org/callforpapers/">Call for Papers team</a> (which I was part of) for reviewing and selecting the talks.</li> <li>All <strong>speakers</strong> who shared their knowledge.</li> <li>The <strong>attendees</strong> who made the devroom lively and interactive.</li> </ul> <p>A special shoutout to <strong>volunteers</strong>, both scheduled and spontaneous. While we had a volunteer schedule for the booth, many community members stepped up to help when needed. For example, <strong>Bruce Momjian</strong> spent hours assisting visitors at the booth, helping find PostgreSQL T-shirts and hoodies in the correct sizes. And <strong>Ants Aasma</strong> helped a team of bouncers (well, pg bouncers, if you know what I mean ;) ). Many others did the same, proving once again that our community is built on <strong>collaboration and generosity</strong>.</p> <p>We had a fantastic time at FOSDEM 2025, and I can’t wait to do it all again next year!</p> <p>Until then, keep contributing and keep the PostgreSQL spirit alive! 🚀</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/pavlo-golub-fosdem-2025-480.webp 480w,/assets/img/pavlo-golub-fosdem-2025-800.webp 800w,/assets/img/pavlo-golub-fosdem-2025-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/pavlo-golub-fosdem-2025.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="community"/><category term="fosdem"/><category term="events"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[FOSDEM has long been a key event for the PostgreSQL community, and 2025 was no exception. Every year, PostgreSQL developers, contributors, and users worldwide gather in Brussels for a week packed with talks, meetings, and discussions. Our community has a strong tradition at FOSDEM, with a dedicated developer room, a booth, and numerous side events]]></summary></entry><entry><title type="html">Join PostgreSQL in Google Summer of Code 2025!</title><link href="https://pashagolub.github.io/blog/2025/GSoC-2025/" rel="alternate" type="text/html" title="Join PostgreSQL in Google Summer of Code 2025!"/><published>2025-01-29T06:00:00+00:00</published><updated>2025-01-29T06:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2025/GSoC-2025</id><content type="html" xml:base="https://pashagolub.github.io/blog/2025/GSoC-2025/"><![CDATA[<h2 id="a-legacy-of-postgresql-in-gsoc">A Legacy of PostgreSQL in GSoC</h2> <p>Google Summer of Code 2025 is here, and PostgreSQL is once again proud to participate in this amazing program! Over the years, many talented contributors have started their PostgreSQL journey through GSoC, with some becoming long-term members of our community. Their commitment has helped improve PostgreSQL and its ecosystem, making this program an essential part of our growth and innovation.</p> <p>Looking ahead, we are excited for new ideas, fresh contributors, and more diversity in projects, mentors, and mentees. PostgreSQL welcomes everyone who wants to contribute and learn, and we encourage <strong>both new and experienced community members to get involved</strong>.</p> <h2 id="whats-new-for-gsoc-2025">What’s New for GSoC 2025?</h2> <p>This year, the GSoC team is particularly <strong>looking to support more security and AI/ML projects</strong>. If you know of an <strong>AI/ML or security-focused open-source project</strong>, encourage them to apply for GSoC 2025!</p> <h2 id="who-can-participate">Who Can Participate?</h2> <p>GSoC is open to <strong>students and newcomers to open-source development</strong>, making it an excellent opportunity for those looking to get involved with PostgreSQL. Whether you’re interested in database internals, extensions, drivers, performance tools, or UI development, there’s a place for you in the PostgreSQL ecosystem.</p> <p><strong>Key Dates:</strong></p> <ul> <li><strong>Mentoring organization applications are open now</strong> at <a href="https://g.co/gsoc">g.co/gsoc</a> and close <strong>February 11, 2025, at 18:00 UTC</strong>.</li> <li>If you’re interested in becoming a mentor, now is the time to reach out to us!</li> <li>It’s time to collect project ideas and update the <a href="https://wiki.postgresql.org/wiki/GSoC_2025">GSoC 2025 Ideas page</a>.</li> <li>Read the <a href="https://google.github.io/gsocguides/mentor/">GSoC Mentor Guide</a> for useful tips.</li> </ul> <h2 id="project-ideas-and-mentorship">Project Ideas and Mentorship</h2> <p>The <strong>most important part of our application as a mentoring organization</strong> is having a <strong>well-defined list of project ideas</strong>. These projects should take approximately:</p> <ul> <li><strong>90 hours</strong> (small project),</li> <li><strong>175 hours</strong> (medium project),</li> <li><strong>350 hours</strong> (large project).</li> </ul> <p>We encourage <strong>all PostgreSQL community members</strong> to submit project ideas and volunteer as mentors. Mentorship is essential for growing our community, sharing knowledge, and integrating new contributors into PostgreSQL development.</p> <h2 id="meet-us-at-fosdem">Meet Us at FOSDEM</h2> <p>Want to discuss project ideas or mentorship opportunities in person?<br/> <strong>Let’s talk during <a href="https://andreas.scherbaum.la/post/2025-01-20_postgresql-at-fosdem-2025/">FOSDEM</a> this week!</strong> PostgreSQL will have a booth and a devroom, so there will be plenty of opportunities to connect.</p> <p>Also, a few members of the <strong>Google Open Source team</strong> will be at FOSDEM carrying <strong>GSoC pennant flags and blue GSoC beanies</strong>. You can find them:</p> <ul> <li><strong>Upper level of Building K, near the large glass doors</strong></li> <li><strong>Saturday &amp; Sunday from 11:00–14:00</strong></li> </ul> <p>Stop by and say hi if you’re interested in GSoC!</p> <h2 id="apply-now--spread-the-word">Apply Now &amp; Spread the Word</h2> <p>As with last year, please consider PostgreSQL to be an <strong>“Umbrella”</strong> project, and anything that would be regarded as a <strong>“PostgreSQL Family”</strong> per the <a href="https://www.postgresql.org/about/policies/news-and-events/">News/Announce policy</a> is likely to be acceptable as a PostgreSQL GSoC project.</p> <p>In other words, if you’re a contributor or developer on WAL-G, barman, pgBackRest, pgwatch, pgagroal, pgexporter, pgmoneta, pgpool, pgbouncer, the PostgreSQL website (pgweb), the PgEU/PgUS website code (pgeu-system), pgAdmin4, DBeaver, HeidiSQL, pldebugger, pspg, the PG RPMs (pgrpms), the JDBC driver, the ODBC driver, or any of the many other PG Family projects, please feel free to add a project for consideration!</p> <p>We need:</p> <ul> <li><strong>Project ideas</strong> that fit the GSoC guidelines.</li> <li><strong>Mentors</strong> to help guide contributors.</li> <li><strong>New contributors</strong> looking to get involved.</li> <li><strong>Community support</strong> to spread awareness.</li> </ul> <h3 id="next-steps">Next Steps</h3> <ul> <li>Read the <a href="https://google.github.io/gsocguides/mentor/">GSoC Mentor Guide</a> and <a href="https://developers.google.com/open-source/gsoc/faq">FAQs</a>.</li> <li><strong>Encourage other open-source projects</strong> to apply! If you know of an open-source org that might be a good fit, remind them to check out the <a href="https://developers.google.com/open-source/gsoc/resources">GSoC resources</a> and use us as a reference.</li> </ul> <p>Let’s make GSoC 2025 another successful year for PostgreSQL and open-source innovation! 🚀</p> <p>Best regards,<br/> Pavlo Golub,<br/> on behalf of PostgreSQL GSoC Admins 💙💛</p>]]></content><author><name></name></author><category term="gsoc"/><category term="community"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[Google Summer of Code is back for 2025!]]></summary></entry><entry><title type="html">How to use PostgreSQL for (military) geoanalytics tasks by Taras Klioba</title><link href="https://pashagolub.github.io/blog/2024/taras-klioba-postgis-in-warfare/" rel="alternate" type="text/html" title="How to use PostgreSQL for (military) geoanalytics tasks by Taras Klioba"/><published>2024-03-05T13:00:00+00:00</published><updated>2024-03-05T13:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2024/taras-klioba-postgis-in-warfare</id><content type="html" xml:base="https://pashagolub.github.io/blog/2024/taras-klioba-postgis-in-warfare/"><![CDATA[<p>During the <a href="https://www.postgresql.eu/events/pgconfeu2023/schedule/session/4605-from-map-to-reality-using-postgis-in-warfare/">PGConf.EU 2023</a>, my friend, colleague, and PostgreSQL Ukraine co-founder <a href="https://www.linkedin.com/in/kloba/">Taras Klioba</a> delved into the fascinating intersection of geospatial analysis and modern warfare.</p> <p>He decided not to publish a video record of his talk for obvious reasons. But now, he has shared the essential details of his talk in the form of a <a href="https://klioba.com/how-to-use-postgresql-for-military-geoanalytics-tasks">blog article</a>. I want to boost this blog post for all Planet Postgres readers; that’s the primary purpose of the text you’re reading.</p> <p>Taras’s article discusses the importance of geoanalytics in military operations due to the prevalence of geospatial data, focusing on utilizing PostgreSQL to process such data. It addresses everyday geoanalytical tasks such as finding K-nearest objects, distance calculations, and point within a polygon determination. It aims to provide practical examples and tips. Open-source data, specifically russian military facility data from <a href="https://www.openstreetmap.org/">OpenStreetMap</a>, is used as a primary dataset. It is then imported into PostgreSQL using the <a href="https://osm2pgsql.org/">osm2pgsql</a> tool for analysis and optimization.</p> <p>Additionally, fire data from NASA satellites is introduced as a second data source, sourced from the <a href="https://www.earthdata.nasa.gov/learn/find-data/near-real-time/firms/vj114imgtdlnrt">Fire Information for Resource Management System</a> (FIRMS). FIRMS allows real-time monitoring of active fires worldwide, including within russian military facilities’ territory since 2022. The process involves downloading fire data using a specific script and importing it into a PostgreSQL database for further analysis.</p> <p>For example, the text outlines a task of finding the K-nearest neighbors, precisely ten fires near the Shahed production plant in russia, known for manufacturing Iranian Shahed drones. It refers to previous <a href="https://molfar.com/blog/alabuga-deanon">research by the Molfar team</a> for detailed information about the factory, located in the special economic zone Alabuga in Tatarstan. The text highlights the shift in factory priorities towards drone production following sanctions. It proposes a method involving creating a buffer around the target area and recursively expanding it until the desired results are obtained.</p> <p>Please, read and share! Glory to Ukraine! 💙💛</p>]]></content><author><name></name></author><category term="postgis"/><category term="pgconf"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[During the PGConf.EU 2023, my friend, colleague, and PostgreSQL Ukraine co-founder Taras Klioba delved into the fascinating intersection of geospatial analysis and modern warfare. He decided not to publish a video record of his talk for obvious reasons. But now, he has shared the essential details of his talk in the form of a blog article. I want to boost this blog post for all Planet Postgres readers; that's the primary purpose of the text you're reading.]]></summary></entry><entry><title type="html">pgxmock v4 is out! Mocking batches for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2024/pgxmock-v4/" rel="alternate" type="text/html" title="pgxmock v4 is out! Mocking batches for PostgreSQL in Go!"/><published>2024-03-05T13:00:00+00:00</published><updated>2024-03-05T13:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2024/pgxmock-v4</id><content type="html" xml:base="https://pashagolub.github.io/blog/2024/pgxmock-v4/"><![CDATA[<p>I am excited to announce the update of <strong><a href="https://github.com/pashagolub/pgxmock/releases/">pgxmock v4</a></strong>! This update adds long awaited support for <code class="language-plaintext highlighter-rouge">pgx.Batch</code> and completely rewrites the <code class="language-plaintext highlighter-rouge">Prepare</code> and <code class="language-plaintext highlighter-rouge">Deallocate</code> mocking implementation.</p> <h2 id="what-are-batches">What are Batches?</h2> <p><a href="https://pkg.go.dev/github.com/jackc/pgx/v5#Batch">Batch queries</a> in <strong>pgx</strong> are a way of bundling multiple queries together to avoid unnecessary network round trips. A <code class="language-plaintext highlighter-rouge">Batch</code> must only be sent once. One can define a function to deal with the results of every query, e.g.</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">batch</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">pgx</span><span class="o">.</span><span class="n">Batch</span><span class="p">{}</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"select some_func()"</span><span class="p">)</span><span class="o">.</span><span class="n">QueryRow</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">row</span> <span class="n">pgx</span><span class="o">.</span><span class="n">Row</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">n</span> <span class="kt">int32</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">row</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">err</span>
  <span class="p">})</span>

  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"select * from foo*"</span><span class="p">)</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">rows</span> <span class="n">pgx</span><span class="o">.</span><span class="n">Rows</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// ...</span>
  <span class="p">})</span>

  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"update foo set bar = 'zoo' where id = 1"</span><span class="p">)</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">ct</span> <span class="n">pgconn</span><span class="o">.</span><span class="n">CommandTag</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">ct</span><span class="o">.</span><span class="n">RowsAffected</span><span class="p">()</span> <span class="o">!=</span> <span class="m">1</span> <span class="p">{</span>
      <span class="n">err</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"expected 1 row to be affected"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span>
  <span class="p">})</span>

  <span class="n">err</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">SendBatch</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">batch</span><span class="p">)</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
</code></pre></div></div> <p>If a developer wants to have more control over result checking, they can use explicit way. This way the example above transforms to</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">batch</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">pgx</span><span class="o">.</span><span class="n">Batch</span><span class="p">{}</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"select some_func()"</span><span class="p">)</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"select * from foo*"</span><span class="p">)</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"update foo set bar = 'zoo' where id = 1"</span><span class="p">)</span>
  <span class="n">br</span> <span class="o">:=</span> <span class="n">mock</span><span class="o">.</span><span class="n">SendBatch</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">batch</span><span class="p">)</span>

  <span class="c">// process results</span>
  <span class="k">var</span> <span class="n">n</span> <span class="kt">int32</span>
  <span class="n">err</span> <span class="o">:=</span> <span class="n">br</span><span class="o">.</span><span class="n">QueryRow</span><span class="p">()</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

  <span class="n">rows</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">br</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c">// ... process rows here</span>

  <span class="n">ct</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">br</span><span class="o">.</span><span class="n">Exec</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">ct</span><span class="o">.</span><span class="n">Update</span><span class="p">()</span> <span class="o">||</span> <span class="m">1</span> <span class="o">==</span> <span class="n">ct</span><span class="o">.</span><span class="n">RowsAffected</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"something bad happened"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">err</span> <span class="o">:=</span> <span class="n">br</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
</code></pre></div></div> <h2 id="and-how-am-i-supposed-to-test-batches-with-pgxmock">And how am I supposed to test batches with pgxmock?</h2> <p>Really simple. Just as everything else. First, you define you expectations! Second, you call your function with a mock as an argument! And finally, you check if all expectations were met and if your code reacted as expected.</p> <p>Let’s imagine we have a function to test</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">processBatch</span><span class="p">(</span><span class="n">db</span> <span class="n">pgx</span><span class="o">.</span><span class="n">Tx</span><span class="p">)</span> <span class="n">err</span> <span class="p">{</span>
  <span class="n">batch</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">pgx</span><span class="o">.</span><span class="n">Batch</span><span class="p">{}</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"select 1 + 1"</span><span class="p">)</span><span class="o">.</span><span class="n">QueryRow</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">row</span> <span class="n">pgx</span><span class="o">.</span><span class="n">Row</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">n</span> <span class="kt">int32</span>
    <span class="k">return</span> <span class="n">row</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">)</span>
  <span class="p">})</span>
  <span class="n">batch</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="s">"update users set active = $1 where id = $2"</span><span class="p">,</span> <span class="no">true</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">ct</span> <span class="n">pgconn</span><span class="o">.</span><span class="n">CommandTag</span><span class="p">)</span> <span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">ct</span><span class="o">.</span><span class="n">RowsAffected</span><span class="p">()</span> <span class="o">!=</span> <span class="m">1</span> <span class="p">{</span>
      <span class="n">err</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"expected 1 row to be affected"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="n">db</span><span class="o">.</span><span class="n">SendBatch</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">batch</span><span class="p">)</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestBatch</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">t</span><span class="o">.</span><span class="n">Parallel</span><span class="p">()</span>
  <span class="n">mock</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">NewConn</span><span class="p">()</span>
  <span class="n">a</span> <span class="o">:=</span> <span class="n">assert</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

  <span class="c">// define our expectations</span>
  <span class="n">eb</span> <span class="o">:=</span> <span class="n">mock</span><span class="o">.</span><span class="n">ExpectBatch</span><span class="p">()</span>
  <span class="n">eb</span><span class="o">.</span><span class="n">ExpectQuery</span><span class="p">(</span><span class="s">"select"</span><span class="p">)</span><span class="o">.</span><span class="n">WillReturnRows</span><span class="p">(</span><span class="n">NewRows</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">"sum"</span><span class="p">})</span><span class="o">.</span><span class="n">AddRow</span><span class="p">(</span><span class="m">2</span><span class="p">))</span>
  <span class="n">eb</span><span class="o">.</span><span class="n">ExpectExec</span><span class="p">(</span><span class="s">"update"</span><span class="p">)</span><span class="o">.</span><span class="n">WithArgs</span><span class="p">(</span><span class="no">true</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span><span class="o">.</span><span class="n">WillReturnResult</span><span class="p">(</span><span class="n">NewResult</span><span class="p">(</span><span class="s">"UPDATE"</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>

  <span class="c">// run the test</span>
  <span class="n">err</span> <span class="o">:=</span> <span class="n">processBatch</span><span class="p">(</span><span class="n">mock</span><span class="p">)</span>

  <span class="c">// check our expectations and code behaviour</span>
  <span class="n">a</span><span class="o">.</span><span class="n">NoError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="n">a</span><span class="o">.</span><span class="n">NoError</span><span class="p">(</span><span class="n">mock</span><span class="o">.</span><span class="n">ExpectationsWereMet</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div> <p>Check <a href="https://github.com/pashagolub/pgxmock/blob/master/batch_test.go">pgxmock test cases</a> to know more!</p> <h2 id="what-about-prepare-and-deallocate">What about <code class="language-plaintext highlighter-rouge">Prepare</code> and <code class="language-plaintext highlighter-rouge">Deallocate</code>?</h2> <p>Since <strong>pgx</strong> doesn’t have a special struct to handle prepared statements, I simplified the <code class="language-plaintext highlighter-rouge">ExpectPrepare</code> struct in pgxmock. Instead of this</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">mock</span><span class="o">.</span><span class="n">ExpectPrepare</span><span class="p">(</span><span class="s">"articles_stmt"</span><span class="p">,</span> <span class="s">"SELECT (.+) FROM articles WHERE id = ?"</span><span class="p">)</span><span class="o">.</span>
    <span class="n">ExpectQuery</span><span class="p">()</span><span class="o">.</span>
    <span class="n">WithArgs</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">.</span>
    <span class="n">WillReturnRows</span><span class="p">(</span><span class="n">NewRows</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">"id"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">})</span><span class="o">.</span><span class="n">AddRow</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">"Betty B."</span><span class="p">))</span>
</code></pre></div></div> <p>one will just use this</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">mock</span><span class="o">.</span><span class="n">ExpectPrepare</span><span class="p">(</span><span class="s">"authors_stmt"</span><span class="p">,</span> <span class="s">"SELECT (.+) FROM authors WHERE id = ?"</span><span class="p">)</span>
  <span class="n">mock</span><span class="o">.</span><span class="n">ExpectQuery</span><span class="p">(</span><span class="s">"authors_stmt"</span><span class="p">)</span><span class="o">.</span>
    <span class="n">WithArgs</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">.</span>
    <span class="n">WillReturnRows</span><span class="p">(</span><span class="n">NewRows</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">"id"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">})</span><span class="o">.</span><span class="n">AddRow</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="s">"Betty B."</span><span class="p">))</span>
</code></pre></div></div> <p>Pretty simple, huh?</p> <h2 id="ready-to-upgrade">Ready to Upgrade?</h2> <p>I motivate all users to upgrade to <strong>pgxmock v4</strong> to take advantage of these exciting enhancements and improvements. Whether you’re a long-time user or just starting with pgxmock, these changes will advance your PostgreSQL mocking experience.</p> <p>To get started with pgxmock v4, check your import statement:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v4"</span>
</code></pre></div></div> <p>and/or run</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v4
</code></pre></div></div> <p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v4</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, please contact me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p> <p>Happy mocking!</p> <p>Please, read and share! Glory to Ukraine! 💙💛</p>]]></content><author><name></name></author><category term="golang"/><category term="pgxmock"/><category term="what&apos;s new"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[The new major release pgxmock v4 is out! This update adds long awaited support for `pgx.Batch` and completely rewrites the `Prepare` and `Deallocate` mocking implementation.]]></summary></entry><entry><title type="html">GSoC 2024 calls for aid! And Postgres will answer!</title><link href="https://pashagolub.github.io/blog/2024/GSoC-2024/" rel="alternate" type="text/html" title="GSoC 2024 calls for aid! And Postgres will answer!"/><published>2024-01-26T13:00:00+00:00</published><updated>2024-01-26T13:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2024/GSoC-2024</id><content type="html" xml:base="https://pashagolub.github.io/blog/2024/GSoC-2024/"><![CDATA[<p>Google Summer of Code is back for 2024! Please review this announcement blog <a href="https://opensource.googleblog.com/2023/11/google-summer-of-code-2024-celebrating-20th-year.html">post</a>.</p> <p>And please make yourself familiar with the <a href="https://developers.google.com/open-source/gsoc/timeline">GSoC 2024 timeline</a>!</p> <p>Now is the time to work on getting together a set of projects we’d like to have GSoC students work on over the summer. Like last year, we must have a good set of projects for students to choose from before the deadline for mentoring organizations.</p> <p>The deadline for Mentoring organizations to apply is <strong>February 6</strong>. The list of accepted organizations will be published on <strong>February 21</strong>.</p> <p>Unsurprisingly, we’ll need to have an Ideas page again, so I’ve gone ahead and <a href="https://wiki.postgresql.org/wiki/GSoC_2024">created one</a> (copying last year’s).</p> <p>Google discusses what makes a good “Ideas” list <a href="https://google.github.io/gsocguides/mentor/defining-a-project-ideas-list.html">here</a>.</p> <p>All the entries are marked with ‘2023’ to indicate they were pulled from last year. If the project from last year is still relevant, please update it to ‘2024’. Make sure to revise all the information (in particular, list yourself as a mentor and remove the other mentors, as appropriate). Please also update the project’s scope to be reasonable for the time students are asked.</p> <p>Having at least two mentors per project is an excellent idea to decrease the load. Please consider listing yourself as a co-mentor for projects with only one mentor listed. The program’s goals are not limited solely to code writing. One of the goals is to inspire new developers to begin participating in open-source communities and to help open-source projects identify and bring in new developers.</p> <p>New entries are welcome and encouraged; note them as ‘2024’ when you add them.</p> <p><a href="https://wiki.postgresql.org/wiki/GSoC_2023">Projects from last</a> year that were worked on but had significant follow-on work to be completed are also welcome - update the description appropriately and mark it as being for ‘2024’.</p> <p>When we get closer to submitting our application, I’ll clean out the ‘2023’ entries that have yet to receive any updates. Also, if any projects are no longer appropriate (maybe they were completed, for example, and no longer need work), please feel free to remove them. We may have missed some updates where a GSoC project was achieved independently of GSoC.</p> <p>As a reminder, each idea on the page should be in the format that the other entries are in and should include:</p> <ol> <li>Project Description</li> <li>Skills needed</li> <li>Difficulty Level</li> <li>Project Size</li> <li>Potential Mentors</li> <li>Expected Outcomes</li> <li>References</li> </ol> <p>As with last year, please consider PostgreSQL to be an <strong>“Umbrella”</strong> project, and anything that would be regarded as a <strong>“PostgreSQL Family”</strong> per the <a href="https://www.postgresql.org/about/policies/news-and-events/">News/Announce policy</a> is likely to be acceptable as a PostgreSQL GSoC project.</p> <p>In other words, if you’re a contributor or developer on WAL-G, barman, pgBackRest, pgwatch, pgagroal, pgexporter, pgmoneta, pgpool, pgbouncer, the PostgreSQL website (pgweb), the PgEU/PgUS website code (pgeu-system), pgAdmin4, DBeaver, HeidiSQL, pldebugger, pspg, the PG RPMs (pgrpms), the JDBC driver, the ODBC driver, or any of the many other PG Family projects, please feel free to add a project for consideration!</p> <p>Let’s have another great year of GSoC with PostgreSQL!<br/> PGForce be with you!</p> <p>Best regards,<br/> Pavlo Golub,<br/> on behalf of PostgreSQL GSoC Admins 💙💛</p>]]></content><author><name></name></author><category term="gsoc"/><category term="community"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[Google Summer of Code is back for 2024!]]></summary></entry><entry><title type="html">Stop micro-posting to the Planet!</title><link href="https://pashagolub.github.io/blog/2023/stop-microposting-on-planet/" rel="alternate" type="text/html" title="Stop micro-posting to the Planet!"/><published>2023-10-25T13:00:00+00:00</published><updated>2023-10-25T13:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/stop-microposting-on-planet</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/stop-microposting-on-planet/"><![CDATA[<p>I want to share my concerns about <a href="https://planet.postgresql.org/">Planet PostgreSQL</a> content. Some authors’ posts use spam and black SEO techniques, whether consciously or not.</p> <p>What are the essential properties of such posts? These “posts” are short, contain external links, and without any meaningful supplement.</p> <ol> <li> <p><strong>Planet PostgreSQL is not a microblog aggregator.</strong> I’m sure there is no place for one-sentence postings in the feed. Twitter, Bluesky, and Mastodon are all great places to go. No one will allow me to add my Mastodon RSS feed to the Planet.</p> </li> <li> <p><strong>Planet PostgreSQL is not a place for gateway pages</strong> - also known as doorway pages. The only purpose of such posts is to rank for particular search queries without offering helpful information. Instead, these micro-posts will redirect the reader to a different page.</p> </li> <li> <p><strong>Planet PostgreSQL is not a place for a black SEO</strong>. Planet PostgreSQL is a subdomain of a high-ranked <a href="https://www.postgresql.org/">postgresql.org</a>. This fact makes the Planet page a perfect place to have as many links to your blog/company site as possible. Posting a lot of meaningless micro-posts will:</p> </li> </ol> <ul> <li>Put and keep the author’s name in the “Top posters” section with a link;</li> <li>Put and keep the author’s company in the “Top Teams” section with a link;</li> <li>Put and keep links to micro-posts on the main postgresql.org page. <br/></li> </ul> <ol> <li> <p><strong>Planet PostgreSQL is a place for fair play.</strong> As a blog writer, I want to be in the same conditions as everyone else, regardless of the name, status, or previous achievements.</p> </li> <li> <p><strong>Planet PostgreSQL is a place for diversity and inclusion.</strong> First, I see it as an entry into the world of PostgreSQL — the area where one follows the heartbeat of the community. Good-written and interesting stories serve that purpose. Micro-posts with a link in it don’t. Second, I see it as a workshop where all authors from competitive companies work together to set a high bar for quality content. Micro-posts are not good and cannot be called content, frankly speaking.</p> </li> </ol> <p>Truly yours,<br/> Pavlo Golub<br/> Planet Macro-Poster 💙💛</p>]]></content><author><name></name></author><category term="planet"/><category term="community"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[I want to share my concerns about Planet PostgreSQL content. Some authors' posts use spam and black SEO techniques, whether consciously or not.]]></summary></entry><entry><title type="html">Introducing pg_timetable v5.6: delayed chains and error handling</title><link href="https://pashagolub.github.io/blog/2023/pg_timetable_v5.6/" rel="alternate" type="text/html" title="Introducing pg_timetable v5.6: delayed chains and error handling"/><published>2023-10-23T05:00:00+00:00</published><updated>2023-10-23T05:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/pg_timetable_v5.6</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pg_timetable_v5.6/"><![CDATA[]]></content><author><name></name></author><category term="postgresql"/><category term="scheduler"/><category term="what&apos;s new"/><summary type="html"><![CDATA[We’re excited to unveil pg_timetable v5.6, a significant release that takes your PostgreSQL job scheduling to a new level. In this release, we’ve introduced several key enhancements and features that empower you to manage and automate your database tasks precisely and flexibly.]]></summary></entry><entry><title type="html">pgxmock v3.1 is out! Mocking named parameters for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params/" rel="alternate" type="text/html" title="pgxmock v3.1 is out! Mocking named parameters for PostgreSQL in Go!"/><published>2023-10-19T12:10:19+00:00</published><updated>2023-10-19T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params/"><![CDATA[<p>I am excited to announce the update of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.1.0">pgxmock v3.1</a></strong>! This update enables <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface support for mocking named parameters in your unit tests.</p> <h2 id="named-parameters-in-postgres">Named parameters? In Postgres?</h2> <p>The actual PostgreSQL <code class="language-plaintext highlighter-rouge">$1</code> style placeholders are not that bad when only a few exist. But it rapidly gets challenging to manage when there are many of them, especially when specific arguments are used multiple times.</p> <p>If you want to know how to use named parameters in your application with <strong>pgx</strong> and <strong>PostgreSQL</strong>, check the <a href="https://pkg.go.dev/github.com/jackc/pgx/v5#NamedArgs">documentation</a>.</p> <p>Here’s a quick example of how to use named parameters in your code:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conn</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"select * from widgets where foo = @foo and bar = @bar"</span><span class="p">,</span>
    <span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"foo"</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="s">"bar"</span><span class="o">:</span> <span class="m">2</span><span class="p">})</span>
</code></pre></div></div> <p>which is effectively the same as</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conn</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"select * from widgets where foo = $1 and bar = $2"</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div></div> <h3 id="introducing-withrewrittensql-to-pgxmock-expectations">Introducing <code class="language-plaintext highlighter-rouge">WithRewrittenSQL</code> to pgxmock expectations</h3> <p>The machinery of the <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface is supposed to rewrite the initial query and apply parameter values. Since in a real-life application, we may use custom implementations, not only provided by <code class="language-plaintext highlighter-rouge">pgx.NamedArgs</code>, we want to be able to check the final query. Exactly for this matter expectations <a href="https://pkg.go.dev/github.com/pashagolub/pgxmock/v3#ExpectedExec">ExpectedExec</a> and <a href="https://pkg.go.dev/github.com/pashagolub/pgxmock/v3#ExpectedQuery">ExpectedQuery</a> provide <code class="language-plaintext highlighter-rouge">WithRewrittenSQL</code> method.</p> <p>Example:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestInsertUser</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Parallel</span><span class="p">()</span>
    <span class="n">mock</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">NewConn</span><span class="p">(</span><span class="n">QueryMatcherOption</span><span class="p">(</span><span class="n">QueryMatcherEqual</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"an error '%s' was not expected when opening a stub database connection"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">mock</span><span class="o">.</span><span class="n">ExpectExec</span><span class="p">(</span><span class="s">"INSERT INTO users(name, created_at) VALUES (@name, @time)"</span><span class="p">)</span><span class="o">.</span>
        <span class="n">WithArgs</span><span class="p">(</span><span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"john"</span><span class="p">,</span> <span class="s">"time"</span><span class="o">:</span> <span class="n">pgxmock</span><span class="o">.</span><span class="n">AnyTime</span><span class="p">{}})</span><span class="o">.</span>
<span class="c">// or   WithArgs(john", pgxmock.AnyTime{}).</span>
        <span class="n">WithRewrittenSQL</span><span class="p">(</span><span class="s">`INSERT INTO users(name, created_at) VALUES ($1, $2)`</span><span class="p">)</span><span class="o">.</span>
        <span class="n">WillReturnResult</span><span class="p">(</span><span class="n">NewResult</span><span class="p">(</span><span class="s">"INSERT"</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>

    <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">mock</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span>
        <span class="s">"INSERT INTO users(name, created_at) VALUES (@name, @time)"</span><span class="p">,</span>
        <span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"john"</span><span class="p">,</span> <span class="s">"time"</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()},</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"error '%s' was not expected, while inserting a row"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">mock</span><span class="o">.</span><span class="n">ExpectationsWereMet</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"there were unfulfilled expectations: %s"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>As you can see in the example, the <code class="language-plaintext highlighter-rouge">WithArgs</code> method now supports the list of plain values and the <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface as the first argument.</p> <h2 id="ready-to-upgrade">Ready to Upgrade?</h2> <p>I motivate all users to upgrade to <strong>pgxmock v3.1</strong> to take advantage of these exciting enhancements and improvements. Whether you’re a long-time user or just starting with pgxmock, these changes will advance your PostgreSQL mocking experience.</p> <p>To get started with pgxmock v3.1, check your import statement:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div> <p>and/or run</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div> <p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3.1</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, please contact me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p> <p>Happy mocking!</p> <p>Truly yours, Pavlo Golub<br/> Author of <strong>pgxmock</strong> 💙💛</p>]]></content><author><name></name></author><category term="golang"/><category term="pgxmock"/><category term="what&apos;s new"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[I am excited to announce the update of pgxmock v3.1! This update enables `pgx.QueryRewriter` interface support for mocking named parameters in your unit tests.]]></summary></entry><entry><title type="html">PostgresUS Diversity Scholarship to attend PGConf NYC</title><link href="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/" rel="alternate" type="text/html" title="PostgresUS Diversity Scholarship to attend PGConf NYC"/><published>2023-09-21T10:10:19+00:00</published><updated>2023-09-21T10:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/"><![CDATA[<p>I want to share the information published by <a href="http://chelseadole.com/about/">Chealse Dole</a> in the community <a href="https://postgresteam.slack.com/archives/CA3GJ7HF1/p1695263405724359">#pglsql-women</a> Slack channel for a wider audience:</p> <blockquote> <p>Heads up PG women – the PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend <a href="https://2023.pgconf.nyc/">PGConf NYC</a> on October 3-5th!</p> </blockquote> <blockquote> <p>Apply <a href="https://forms.gle/4nB1KrPVbTzhFMSd7">here</a> by Sept 29th with details about your involvement in Postgres and how you could give back to your local community to be considered! I’d love to see some of y’all there! 🐘</p> </blockquote> <p>Although this particular message is directly relevant to women, applicants may be from a a traditionally underrepresented and/or marginalized group in the technology and/or open source communities including, but not limited to: persons identifying as LGBT, women, persons of color, persons with disabilities, veterans, and/or students. Individuals who apply should be active members of the open source community who are unable to attend for financial reasons and are unable to get funding from their companies.</p> <p>If you have any questions, please email <a href="mailto:diversity@postgresql.us">diversity@postgresql.us</a>.</p> <p>Take your chance to attend this great conference. And see you there!</p> <p>Sincerely yours, Pavlo Golub<br/> Co-founder of PostgreSQL Ukraine 💙💛</p>]]></content><author><name></name></author><category term="pgconf"/><category term="community"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[The PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend PGConf NYC on October 3-5th, 2023!]]></summary></entry><entry><title type="html">Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/" rel="alternate" type="text/html" title="Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!"/><published>2023-09-20T12:10:19+00:00</published><updated>2023-09-20T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/"><![CDATA[<p>I am thrilled to introduce the much-anticipated major release of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.0.0">pgxmock v3</a></strong>! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.</p> <p>Here’s a quick overview of the exciting changes and additions in this release:</p> <h2 id="high-priority-new-features">High-Priority New Features</h2> <h3 id="rewrite-with-findexpectationfunc">Rewrite with <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code></h3> <p>I’ve completely overhauled the internals of <code class="language-plaintext highlighter-rouge">pgxmock</code> by rewriting all methods using <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code>. This improvement allows us to add even more custom expectations without writing a duplicate code. The only thing we will need is a custom callback function to compare a new kind of expectation.</p> <h3 id="enhanced-expectations">Enhanced Expectations</h3> <p>I’ve expanded the capabilities of <strong>all</strong> expectations with new methods like <code class="language-plaintext highlighter-rouge">WillDelayFor()</code>, <code class="language-plaintext highlighter-rouge">WillReturnError()</code>, and <code class="language-plaintext highlighter-rouge">WillPanic()</code>. Now you have even more control over how your mock database behaves in various scenarios.</p> <h3 id="introducing-times-and-maybe">Introducing <code class="language-plaintext highlighter-rouge">Times()</code> and <code class="language-plaintext highlighter-rouge">Maybe()</code></h3> <p>I’m introducing the <code class="language-plaintext highlighter-rouge">Times()</code> method, allowing you to specify how many times an expectation should be met. This feature enhances the flexibility of your mock database interactions. Meanwhile <code class="language-plaintext highlighter-rouge">Maybe()</code> method allows the expectation to be optional. Not calling an optional method will not cause an error while asserting expectations.</p> <h2 id="new-features">New Features</h2> <h3 id="improved-test-coverage-">Improved Test Coverage <a href="https://coveralls.io/github/pashagolub/pgxmock?branch=master"><img src="https://coveralls.io/repos/github/pashagolub/pgxmock/badge.svg?branch=master" alt="Coverage Status"/></a></h3> <p>I’ve extended test coverage, ensuring that <code class="language-plaintext highlighter-rouge">pgxmock</code> remains a reliable choice for your testing needs. To make the testing even more comprehensive, I’ve added several new test cases, e.g., <code class="language-plaintext highlighter-rouge">TestRowsConn()</code> and <code class="language-plaintext highlighter-rouge">TestPanic()</code>. These scenarios cover a wider range of potential use cases. They will help us to eliminate possible bugs in the future.</p> <h3 id="keeping-up-with-the-times">Keeping Up with the Times</h3> <p>I’m staying up-to-date with the latest developments. In this release, I’ve bumped up the Go version to v1.21, ensuring compatibility and leveraging the newest features of the language.</p> <h3 id="introducing-callmodifier-interface">Introducing CallModifier Interface</h3> <p>I’ve introduced the <code class="language-plaintext highlighter-rouge">CallModifier</code> interface to expectations, providing greater control and customization when working with mock database calls. All expectations currently support common behavior modifiers, like delay, error, and panic. We can extend the list later with ease.</p> <h2 id="ready-to-upgrade">Ready to Upgrade?</h2> <p>I encourage all users to upgrade to <strong>pgxmock v3</strong> to take advantage of these exciting enhancements and improvements. Whether you’re a long-time user or just getting started with pgxmock, these changes will elevate your database mocking experience to new heights.</p> <p>To get started with pgxmock v3, simply update your import statement:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div> <p>and/or run</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div> <p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, feel free to reach out to me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p> <p>Happy mocking!</p> <p>Truly yours, Pavlo Golub<br/> Author of <strong>pgxmock</strong> 💙💛</p>]]></content><author><name></name></author><category term="golang"/><category term="pgxmock"/><category term="what&apos;s new"/><category term="postgresql"/><category term="personal"/><summary type="html"><![CDATA[I am thrilled to introduce the much-anticipated major release of pgxmock v3! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.]]></summary></entry></feed>