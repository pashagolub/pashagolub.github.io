<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://pashagolub.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pashagolub.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-21T11:55:08+00:00</updated><id>https://pashagolub.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal page with the blog and CV.
</subtitle><entry><title type="html">PostgresUS Diversity Scholarship to attend PGConf NYC</title><link href="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/" rel="alternate" type="text/html" title="PostgresUS Diversity Scholarship to attend PGConf NYC" /><published>2023-09-21T10:10:19+00:00</published><updated>2023-09-21T10:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/"><![CDATA[<p>I want to share the information published by <a href="http://chelseadole.com/about/">Chealse Dole</a> in the community <a href="https://postgresteam.slack.com/archives/CA3GJ7HF1/p1695263405724359">#pglsql-women</a> Slack channel for a wider audience:</p>

<blockquote>
  <p>Heads up PG women ‚Äì the PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend <a href="https://2023.pgconf.nyc/">PGConf NYC</a> on October 3-5th!</p>
</blockquote>

<blockquote>
  <p>Apply <a href="https://forms.gle/4nB1KrPVbTzhFMSd7">here</a> by Sept 29th with details about your involvement in Postgres and how you could give back to your local community to be considered! I‚Äôd love to see some of y‚Äôall there! üêò</p>
</blockquote>

<p>Although this particular message is directly relevant to women, applicants may be from a a traditionally underrepresented and/or marginalized group in the technology and/or open source communities including, but not limited to: persons identifying as LGBT, women, persons of color, persons with disabilities, veterans,  and/or students. Individuals who apply should be active members of the open source community who are unable to attend for financial reasons and are unable to get funding from their companies.</p>

<p>If you have any questions, please email <a href="mailto:diversity@postgresql.us">diversity@postgresql.us</a>.</p>

<p>Take your chance to attend this great conference. And see you there!</p>

<p>Sincerely yours,
Pavlo Golub<br />
Co-founder of PostgreSQL Ukraine üíôüíõ</p>]]></content><author><name></name></author><category term="pgconf" /><category term="community" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[The PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend PGConf NYC on October 3-5th, 2023!]]></summary></entry><entry><title type="html">Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/" rel="alternate" type="text/html" title="Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!" /><published>2023-09-20T12:10:19+00:00</published><updated>2023-09-20T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/"><![CDATA[<p>I am thrilled to introduce the much-anticipated major release of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.0.0">pgxmock v3</a></strong>! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.</p>

<p>Here‚Äôs a quick overview of the exciting changes and additions in this release:</p>

<h2 id="high-priority-new-features">High-Priority New Features</h2>

<h3 id="rewrite-with-findexpectationfunc">Rewrite with <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code></h3>
<p>I‚Äôve completely overhauled the internals of <code class="language-plaintext highlighter-rouge">pgxmock</code> by rewriting all methods using <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code>. This improvement allows us to add even more custom expectations without writing a duplicate code. The only thing we will need is a custom callback function to compare a new kind of expectation.</p>

<h3 id="enhanced-expectations">Enhanced Expectations</h3>
<p>I‚Äôve expanded the capabilities of <strong>all</strong> expectations with new methods like <code class="language-plaintext highlighter-rouge">WillDelayFor()</code>, <code class="language-plaintext highlighter-rouge">WillReturnError()</code>, and <code class="language-plaintext highlighter-rouge">WillPanic()</code>. Now you have even more control over how your mock database behaves in various scenarios.</p>

<h3 id="introducing-times-and-maybe">Introducing <code class="language-plaintext highlighter-rouge">Times()</code> and <code class="language-plaintext highlighter-rouge">Maybe()</code></h3>
<p>I‚Äôm introducing the <code class="language-plaintext highlighter-rouge">Times()</code> method, allowing you to specify how many times an expectation should be met. This feature enhances the flexibility of your mock database interactions. Meanwhile <code class="language-plaintext highlighter-rouge">Maybe()</code> method allows the expectation to be optional. Not calling an optional method will not cause an error while asserting expectations.</p>

<h2 id="new-features">New Features</h2>

<h3 id="improved-test-coverage-">Improved Test Coverage <a href="https://coveralls.io/github/pashagolub/pgxmock?branch=master"><img src="https://coveralls.io/repos/github/pashagolub/pgxmock/badge.svg?branch=master" alt="Coverage Status" /></a></h3>
<p>I‚Äôve extended test coverage, ensuring that <code class="language-plaintext highlighter-rouge">pgxmock</code> remains a reliable choice for your testing needs. To make the testing even more comprehensive, I‚Äôve added several new test cases, e.g., <code class="language-plaintext highlighter-rouge">TestRowsConn()</code> and <code class="language-plaintext highlighter-rouge">TestPanic()</code>. These scenarios cover a wider range of potential use cases. They will help us to eliminate possible bugs in the future.</p>

<h3 id="keeping-up-with-the-times">Keeping Up with the Times</h3>
<p>I‚Äôm staying up-to-date with the latest developments. In this release, I‚Äôve bumped up the Go version to v1.21, ensuring compatibility and leveraging the newest features of the language.</p>

<h3 id="introducing-callmodifier-interface">Introducing CallModifier Interface</h3>
<p>I‚Äôve introduced the <code class="language-plaintext highlighter-rouge">CallModifier</code> interface to expectations, providing greater control and customization when working with mock database calls. All expectations currently support common behavior modifiers, like delay, error, and panic. We can extend the list later with ease.</p>

<h2 id="ready-to-upgrade">Ready to Upgrade?</h2>

<p>I encourage all users to upgrade to <strong>pgxmock v3</strong> to take advantage of these exciting enhancements and improvements. Whether you‚Äôre a long-time user or just getting started with pgxmock, these changes will elevate your database mocking experience to new heights.</p>

<p>To get started with pgxmock v3, simply update your import statement:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div>

<p>and/or run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div>

<p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, feel free to reach out to me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p>

<p>Happy mocking!</p>

<p>Truly yours,
Pavlo Golub<br />
Author of <strong>pgxmock</strong> üíôüíõ</p>]]></content><author><name></name></author><category term="golang" /><category term="pgxmock" /><category term="what&apos;s new" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[I am thrilled to introduce the much-anticipated major release of pgxmock v3! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.]]></summary></entry><entry><title type="html">Indexing `LIKE` Filters</title><link href="https://pashagolub.github.io/blog/2023/indexing-like-filters/" rel="alternate" type="text/html" title="Indexing `LIKE` Filters" /><published>2023-09-08T13:40:16+00:00</published><updated>2023-09-08T13:40:16+00:00</updated><id>https://pashagolub.github.io/blog/2023/indexing-like-filters</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/indexing-like-filters/"><![CDATA[<p><a href="https://postgresql.life/post/markus_winand/">Markus Winand</a> wrote a <a href="https://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning">great article</a> about why and how users should use <code class="language-plaintext highlighter-rouge">LIKE</code> operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.</p>]]></content><author><name></name></author><category term="index" /><category term="FTS" /><category term="tips and tricks" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[Markus Winand wrote a great article about why and how users should use LIKE operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.]]></summary></entry><entry><title type="html">PGDay Belgium 2023 reflections</title><link href="https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections/" rel="alternate" type="text/html" title="PGDay Belgium 2023 reflections" /><published>2023-06-14T17:39:00+00:00</published><updated>2023-06-14T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections/"><![CDATA[]]></content><author><name></name></author><category term="community" /><category term="events" /><category term="pgday" /><category term="pgconf" /><category term="postgresql" /><summary type="html"><![CDATA[As a senior database consultant and developer at CYBERTEC PostgreSQL International, I recently enjoyed presenting at PGDay Belgium 2023 at the UCLL campus Proximus in Haasrode.]]></summary></entry><entry><title type="html">LZ4 and ZSTD pg_dump compression in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression/" rel="alternate" type="text/html" title="LZ4 and ZSTD pg_dump compression in PostgreSQL 16" /><published>2023-04-25T17:39:00+00:00</published><updated>2023-04-25T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression/"><![CDATA[]]></content><author><name></name></author><category term="compression" /><category term="pg_dump" /><category term="pg_restore" /><category term="update" /><category term="upgrade" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[LZ4 and ZSTD are additional pg_dump compression methods added in PostgreSQL 16. Find out how to use them, & how they compare to GZIP.]]></summary></entry><entry><title type="html">Underscores in numeric constants in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/numeric-underscores/" rel="alternate" type="text/html" title="Underscores in numeric constants in PostgreSQL 16" /><published>2023-04-18T17:39:00+00:00</published><updated>2023-04-18T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/numeric-underscores</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/numeric-underscores/"><![CDATA[]]></content><author><name></name></author><category term="sql" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[PostgreSQL 16 includes support for underscores in integer and numeric constants. Learn how to use them in large numbers without errors.]]></summary></entry><entry><title type="html">Parallel aggregate in PostgreSQL 16 for better performance</title><link href="https://pashagolub.github.io/blog/2023/parallel-agregate/" rel="alternate" type="text/html" title="Parallel aggregate in PostgreSQL 16 for better performance" /><published>2023-04-11T17:39:00+00:00</published><updated>2023-04-11T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/parallel-agregate</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/parallel-agregate/"><![CDATA[]]></content><author><name></name></author><category term="array_agg" /><category term="concurrency" /><category term="parallel" /><category term="aggregate" /><category term="performance" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[A new functionality for parallel aggregates on string_agg() and array_agg() functions is coming in PostgreSQL 16 with improved performance.]]></summary></entry><entry><title type="html">New old ‚Äúdebug_parallel_query‚Äù setting in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/debug_parallel_query/" rel="alternate" type="text/html" title="New old ‚Äúdebug_parallel_query‚Äù setting in PostgreSQL 16" /><published>2023-03-28T17:39:00+00:00</published><updated>2023-03-28T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/debug_parallel_query</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/debug_parallel_query/"><![CDATA[]]></content><author><name></name></author><category term="GUC" /><category term="postgresql 16" /><category term="what&apos;s new" /><summary type="html"><![CDATA[force_parallel_mode - the runtime option will have a new name in PostgreSQL 16: debug_parallel_query. Find out why.]]></summary></entry><entry><title type="html">pg_timetable v5.3 is out!</title><link href="https://pashagolub.github.io/blog/2023/pg_timetable_v5.3/" rel="alternate" type="text/html" title="pg_timetable v5.3 is out!" /><published>2023-03-15T17:39:00+00:00</published><updated>2023-03-15T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/pg_timetable_v5.3</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pg_timetable_v5.3/"><![CDATA[]]></content><author><name></name></author><category term="bloat" /><category term="logging" /><category term="postgresql" /><category term="scheduler" /><category term="what&apos;s new" /><summary type="html"><![CDATA[pg_timetable v5.3 release is here - new logging features include: disable database logging, plus 4 new ways to control file logging.]]></summary></entry><entry><title type="html">ER diagrams with SQL and Mermaid</title><link href="https://pashagolub.github.io/blog/2023/er-diagrams-sql-mermaid/" rel="alternate" type="text/html" title="ER diagrams with SQL and Mermaid" /><published>2023-02-21T17:39:00+00:00</published><updated>2023-02-21T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/er-diagrams-sql-mermaid</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/er-diagrams-sql-mermaid/"><![CDATA[]]></content><author><name></name></author><category term="architecture" /><category term="development" /><category term="diagram" /><category term="ER" /><category term="visualisation" /><summary type="html"><![CDATA[Generate an ER diagram for a PostgreSQL database using plain SQL and Mermaid. Explore entity relationship diagrams for architecture/dev]]></summary></entry></feed>