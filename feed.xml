<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://pashagolub.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pashagolub.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-01-25T14:59:46+00:00</updated><id>https://pashagolub.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal page with the blog and CV.
</subtitle><entry><title type="html">Stop micro-posting to the Planet!</title><link href="https://pashagolub.github.io/blog/2023/stop-microposting-on-planet/" rel="alternate" type="text/html" title="Stop micro-posting to the Planet!" /><published>2023-10-25T13:00:00+00:00</published><updated>2023-10-25T13:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/stop-microposting-on-planet</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/stop-microposting-on-planet/"><![CDATA[<p>I want to share my concerns about <a href="https://planet.postgresql.org/">Planet PostgreSQL</a> content. Some authors‚Äô posts use spam and black SEO techniques, whether consciously or not.</p>

<p>What are the essential properties of such posts? These ‚Äúposts‚Äù are short, contain external links, and without any meaningful supplement.</p>

<ol>
  <li>
    <p><strong>Planet PostgreSQL is not a microblog aggregator.</strong> I‚Äôm sure there is no place for one-sentence postings in the feed. Twitter, Bluesky, and Mastodon are all great places to go. No one will allow me to add my Mastodon RSS feed to the Planet.</p>
  </li>
  <li>
    <p><strong>Planet PostgreSQL is not a place for gateway pages</strong> - also known as doorway pages. The only purpose of such posts is to rank for particular search queries without offering helpful information. Instead, these micro-posts will redirect the reader to a different page.</p>
  </li>
  <li><strong>Planet PostgreSQL is not a place for a black SEO</strong>. Planet PostgreSQL is a subdomain of a high-ranked <a href="https://www.postgresql.org/">postgresql.org</a>. This fact makes the Planet page a perfect place to have as many links to your blog/company site as possible. Posting a lot of meaningless micro-posts will:
    <ul>
      <li>Put and keep the author‚Äôs name in the ‚ÄúTop posters‚Äù section with a link;</li>
      <li>Put and keep the author‚Äôs company in the ‚ÄúTop Teams‚Äù section with a link;</li>
      <li>Put and keep links to micro-posts on the main postgresql.org page. 
<br /></li>
    </ul>
  </li>
  <li>
    <p><strong>Planet PostgreSQL is a place for fair play.</strong> As a blog writer, I want to be in the same conditions as everyone else, regardless of the name, status, or previous achievements.</p>
  </li>
  <li><strong>Planet PostgreSQL is a place for diversity and inclusion.</strong> First, I see it as an entry into the world of PostgreSQL ‚Äî the area where one follows the heartbeat of the community. Good-written and interesting stories serve that purpose. Micro-posts with a link in it don‚Äôt. Second, I see it as a workshop where all authors from competitive companies work together to set a high bar for quality content. Micro-posts are not good and cannot be called content, frankly speaking.</li>
</ol>

<p>Truly yours,<br />
Pavlo Golub<br />
Planet Macro-Poster üíôüíõ</p>]]></content><author><name></name></author><category term="planet" /><category term="community" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[I want to share my concerns about Planet PostgreSQL content. Some authors' posts use spam and black SEO techniques, whether consciously or not.]]></summary></entry><entry><title type="html">Introducing pg_timetable v5.6: delayed chains and error handling</title><link href="https://pashagolub.github.io/blog/2023/pg_timetable_v5.6/" rel="alternate" type="text/html" title="Introducing pg_timetable v5.6: delayed chains and error handling" /><published>2023-10-23T05:00:00+00:00</published><updated>2023-10-23T05:00:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/pg_timetable_v5.6</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pg_timetable_v5.6/"><![CDATA[]]></content><author><name></name></author><category term="postgresql" /><category term="scheduler" /><category term="what&apos;s new" /><summary type="html"><![CDATA[We‚Äôre excited to unveil pg_timetable v5.6, a significant release that takes your PostgreSQL job scheduling to a new level. In this release, we‚Äôve introduced several key enhancements and features that empower you to manage and automate your database tasks precisely and flexibly.]]></summary></entry><entry><title type="html">pgxmock v3.1 is out! Mocking named parameters for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params/" rel="alternate" type="text/html" title="pgxmock v3.1 is out! Mocking named parameters for PostgreSQL in Go!" /><published>2023-10-19T12:10:19+00:00</published><updated>2023-10-19T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pgxmock-v3.1-named-params/"><![CDATA[<p>I am excited to announce the update of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.1.0">pgxmock v3.1</a></strong>! This update enables <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface support for mocking named parameters in your unit tests.</p>

<h2 id="named-parameters-in-postgres">Named parameters? In Postgres?</h2>

<p>The actual PostgreSQL <code class="language-plaintext highlighter-rouge">$1</code> style placeholders are not that bad when only a few exist. But it rapidly gets challenging to manage when there are many of them, especially when specific arguments are used multiple times.</p>

<p>If you want to know how to use named parameters in your application with <strong>pgx</strong> and <strong>PostgreSQL</strong>, check the <a href="https://pkg.go.dev/github.com/jackc/pgx/v5#NamedArgs">documentation</a>.</p>

<p>Here‚Äôs a quick example of how to use named parameters in your code:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conn</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"select * from widgets where foo = @foo and bar = @bar"</span><span class="p">,</span> 
    <span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"foo"</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="s">"bar"</span><span class="o">:</span> <span class="m">2</span><span class="p">})</span>
</code></pre></div></div>
<p>which is effectively the same as</p>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conn</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"select * from widgets where foo = $1 and bar = $2"</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="introducing-withrewrittensql-to-pgxmock-expectations">Introducing <code class="language-plaintext highlighter-rouge">WithRewrittenSQL</code> to pgxmock expectations</h3>

<p>The machinery of the <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface is supposed to rewrite the initial query and apply parameter values. Since in a real-life application, we may use custom implementations, not only provided by <code class="language-plaintext highlighter-rouge">pgx.NamedArgs</code>, we want to be able to check the final query. Exactly for this matter expectations <a href="https://pkg.go.dev/github.com/pashagolub/pgxmock/v3#ExpectedExec">ExpectedExec</a> and <a href="https://pkg.go.dev/github.com/pashagolub/pgxmock/v3#ExpectedQuery">ExpectedQuery</a> provide <code class="language-plaintext highlighter-rouge">WithRewrittenSQL</code> method.</p>

<p>Example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestInsertUser</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Parallel</span><span class="p">()</span>
    <span class="n">mock</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">NewConn</span><span class="p">(</span><span class="n">QueryMatcherOption</span><span class="p">(</span><span class="n">QueryMatcherEqual</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"an error '%s' was not expected when opening a stub database connection"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">mock</span><span class="o">.</span><span class="n">ExpectExec</span><span class="p">(</span><span class="s">"INSERT INTO users(name, created_at) VALUES (@name, @time)"</span><span class="p">)</span><span class="o">.</span>
        <span class="n">WithArgs</span><span class="p">(</span><span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"john"</span><span class="p">,</span> <span class="s">"time"</span><span class="o">:</span> <span class="n">pgxmock</span><span class="o">.</span><span class="n">AnyTime</span><span class="p">{}})</span><span class="o">.</span>
<span class="c">// or   WithArgs(john", pgxmock.AnyTime{}).</span>
        <span class="n">WithRewrittenSQL</span><span class="p">(</span><span class="s">`INSERT INTO users(name, created_at) VALUES ($1, $2)`</span><span class="p">)</span><span class="o">.</span>
        <span class="n">WillReturnResult</span><span class="p">(</span><span class="n">NewResult</span><span class="p">(</span><span class="s">"INSERT"</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>

    <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">mock</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span>
        <span class="s">"INSERT INTO users(name, created_at) VALUES (@name, @time)"</span><span class="p">,</span>
        <span class="n">pgx</span><span class="o">.</span><span class="n">NamedArgs</span><span class="p">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"john"</span><span class="p">,</span> <span class="s">"time"</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()},</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"error '%s' was not expected, while inserting a row"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">mock</span><span class="o">.</span><span class="n">ExpectationsWereMet</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"there were unfulfilled expectations: %s"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can see in the example, the <code class="language-plaintext highlighter-rouge">WithArgs</code> method now supports the list of plain values and the <code class="language-plaintext highlighter-rouge">pgx.QueryRewriter</code> interface as the first argument.</p>

<h2 id="ready-to-upgrade">Ready to Upgrade?</h2>

<p>I motivate all users to upgrade to <strong>pgxmock v3.1</strong> to take advantage of these exciting enhancements and improvements. Whether you‚Äôre a long-time user or just starting with pgxmock, these changes will advance your PostgreSQL mocking experience.</p>

<p>To get started with pgxmock v3.1, check your import statement:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div>

<p>and/or run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div>

<p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3.1</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, please contact me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p>

<p>Happy mocking!</p>

<p>Truly yours,
Pavlo Golub<br />
Author of <strong>pgxmock</strong> üíôüíõ</p>]]></content><author><name></name></author><category term="golang" /><category term="pgxmock" /><category term="what&apos;s new" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[I am excited to announce the update of pgxmock v3.1! This update enables `pgx.QueryRewriter` interface support for mocking named parameters in your unit tests.]]></summary></entry><entry><title type="html">PostgresUS Diversity Scholarship to attend PGConf NYC</title><link href="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/" rel="alternate" type="text/html" title="PostgresUS Diversity Scholarship to attend PGConf NYC" /><published>2023-09-21T10:10:19+00:00</published><updated>2023-09-21T10:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/postgres-diversity-scolarship/"><![CDATA[<p>I want to share the information published by <a href="http://chelseadole.com/about/">Chealse Dole</a> in the community <a href="https://postgresteam.slack.com/archives/CA3GJ7HF1/p1695263405724359">#pglsql-women</a> Slack channel for a wider audience:</p>

<blockquote>
  <p>Heads up PG women ‚Äì the PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend <a href="https://2023.pgconf.nyc/">PGConf NYC</a> on October 3-5th!</p>
</blockquote>

<blockquote>
  <p>Apply <a href="https://forms.gle/4nB1KrPVbTzhFMSd7">here</a> by Sept 29th with details about your involvement in Postgres and how you could give back to your local community to be considered! I‚Äôd love to see some of y‚Äôall there! üêò</p>
</blockquote>

<p>Although this particular message is directly relevant to women, applicants may be from a a traditionally underrepresented and/or marginalized group in the technology and/or open source communities including, but not limited to: persons identifying as LGBT, women, persons of color, persons with disabilities, veterans,  and/or students. Individuals who apply should be active members of the open source community who are unable to attend for financial reasons and are unable to get funding from their companies.</p>

<p>If you have any questions, please email <a href="mailto:diversity@postgresql.us">diversity@postgresql.us</a>.</p>

<p>Take your chance to attend this great conference. And see you there!</p>

<p>Sincerely yours,
Pavlo Golub<br />
Co-founder of PostgreSQL Ukraine üíôüíõ</p>]]></content><author><name></name></author><category term="pgconf" /><category term="community" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[The PostgresUS Diversity Scholarship still has funding to support flights, hotels, and conference registration for 2-3 women to attend PGConf NYC on October 3-5th, 2023!]]></summary></entry><entry><title type="html">Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/" rel="alternate" type="text/html" title="Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!" /><published>2023-09-20T12:10:19+00:00</published><updated>2023-09-20T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/"><![CDATA[<p>I am thrilled to introduce the much-anticipated major release of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.0.0">pgxmock v3</a></strong>! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.</p>

<p>Here‚Äôs a quick overview of the exciting changes and additions in this release:</p>

<h2 id="high-priority-new-features">High-Priority New Features</h2>

<h3 id="rewrite-with-findexpectationfunc">Rewrite with <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code></h3>
<p>I‚Äôve completely overhauled the internals of <code class="language-plaintext highlighter-rouge">pgxmock</code> by rewriting all methods using <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code>. This improvement allows us to add even more custom expectations without writing a duplicate code. The only thing we will need is a custom callback function to compare a new kind of expectation.</p>

<h3 id="enhanced-expectations">Enhanced Expectations</h3>
<p>I‚Äôve expanded the capabilities of <strong>all</strong> expectations with new methods like <code class="language-plaintext highlighter-rouge">WillDelayFor()</code>, <code class="language-plaintext highlighter-rouge">WillReturnError()</code>, and <code class="language-plaintext highlighter-rouge">WillPanic()</code>. Now you have even more control over how your mock database behaves in various scenarios.</p>

<h3 id="introducing-times-and-maybe">Introducing <code class="language-plaintext highlighter-rouge">Times()</code> and <code class="language-plaintext highlighter-rouge">Maybe()</code></h3>
<p>I‚Äôm introducing the <code class="language-plaintext highlighter-rouge">Times()</code> method, allowing you to specify how many times an expectation should be met. This feature enhances the flexibility of your mock database interactions. Meanwhile <code class="language-plaintext highlighter-rouge">Maybe()</code> method allows the expectation to be optional. Not calling an optional method will not cause an error while asserting expectations.</p>

<h2 id="new-features">New Features</h2>

<h3 id="improved-test-coverage-">Improved Test Coverage <a href="https://coveralls.io/github/pashagolub/pgxmock?branch=master"><img src="https://coveralls.io/repos/github/pashagolub/pgxmock/badge.svg?branch=master" alt="Coverage Status" /></a></h3>
<p>I‚Äôve extended test coverage, ensuring that <code class="language-plaintext highlighter-rouge">pgxmock</code> remains a reliable choice for your testing needs. To make the testing even more comprehensive, I‚Äôve added several new test cases, e.g., <code class="language-plaintext highlighter-rouge">TestRowsConn()</code> and <code class="language-plaintext highlighter-rouge">TestPanic()</code>. These scenarios cover a wider range of potential use cases. They will help us to eliminate possible bugs in the future.</p>

<h3 id="keeping-up-with-the-times">Keeping Up with the Times</h3>
<p>I‚Äôm staying up-to-date with the latest developments. In this release, I‚Äôve bumped up the Go version to v1.21, ensuring compatibility and leveraging the newest features of the language.</p>

<h3 id="introducing-callmodifier-interface">Introducing CallModifier Interface</h3>
<p>I‚Äôve introduced the <code class="language-plaintext highlighter-rouge">CallModifier</code> interface to expectations, providing greater control and customization when working with mock database calls. All expectations currently support common behavior modifiers, like delay, error, and panic. We can extend the list later with ease.</p>

<h2 id="ready-to-upgrade">Ready to Upgrade?</h2>

<p>I encourage all users to upgrade to <strong>pgxmock v3</strong> to take advantage of these exciting enhancements and improvements. Whether you‚Äôre a long-time user or just getting started with pgxmock, these changes will elevate your database mocking experience to new heights.</p>

<p>To get started with pgxmock v3, simply update your import statement:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div>

<p>and/or run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div>

<p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, feel free to reach out to me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p>

<p>Happy mocking!</p>

<p>Truly yours,
Pavlo Golub<br />
Author of <strong>pgxmock</strong> üíôüíõ</p>]]></content><author><name></name></author><category term="golang" /><category term="pgxmock" /><category term="what&apos;s new" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[I am thrilled to introduce the much-anticipated major release of pgxmock v3! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.]]></summary></entry><entry><title type="html">Indexing `LIKE` Filters</title><link href="https://pashagolub.github.io/blog/2023/indexing-like-filters/" rel="alternate" type="text/html" title="Indexing `LIKE` Filters" /><published>2023-09-08T13:40:16+00:00</published><updated>2023-09-08T13:40:16+00:00</updated><id>https://pashagolub.github.io/blog/2023/indexing-like-filters</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/indexing-like-filters/"><![CDATA[<p><a href="https://postgresql.life/post/markus_winand/">Markus Winand</a> wrote a <a href="https://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning">great article</a> about why and how users should use <code class="language-plaintext highlighter-rouge">LIKE</code> operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.</p>]]></content><author><name></name></author><category term="index" /><category term="FTS" /><category term="tips and tricks" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[Markus Winand wrote a great article about why and how users should use LIKE operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.]]></summary></entry><entry><title type="html">PGDay Belgium 2023 reflections</title><link href="https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections/" rel="alternate" type="text/html" title="PGDay Belgium 2023 reflections" /><published>2023-06-14T17:39:00+00:00</published><updated>2023-06-14T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/PGDay-Belgium-2023-reflections/"><![CDATA[]]></content><author><name></name></author><category term="community" /><category term="events" /><category term="pgday" /><category term="pgconf" /><category term="postgresql" /><summary type="html"><![CDATA[As a senior database consultant and developer at CYBERTEC PostgreSQL International, I recently enjoyed presenting at PGDay Belgium 2023 at the UCLL campus Proximus in Haasrode.]]></summary></entry><entry><title type="html">LZ4 and ZSTD pg_dump compression in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression/" rel="alternate" type="text/html" title="LZ4 and ZSTD pg_dump compression in PostgreSQL 16" /><published>2023-04-25T17:39:00+00:00</published><updated>2023-04-25T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/lz4-zstd-pg_dump-compression/"><![CDATA[]]></content><author><name></name></author><category term="compression" /><category term="pg_dump" /><category term="pg_restore" /><category term="update" /><category term="upgrade" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[LZ4 and ZSTD are additional pg_dump compression methods added in PostgreSQL 16. Find out how to use them, & how they compare to GZIP.]]></summary></entry><entry><title type="html">Underscores in numeric constants in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/numeric-underscores/" rel="alternate" type="text/html" title="Underscores in numeric constants in PostgreSQL 16" /><published>2023-04-18T17:39:00+00:00</published><updated>2023-04-18T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/numeric-underscores</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/numeric-underscores/"><![CDATA[]]></content><author><name></name></author><category term="sql" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[PostgreSQL 16 includes support for underscores in integer and numeric constants. Learn how to use them in large numbers without errors.]]></summary></entry><entry><title type="html">Parallel aggregate in PostgreSQL 16 for better performance</title><link href="https://pashagolub.github.io/blog/2023/parallel-agregate/" rel="alternate" type="text/html" title="Parallel aggregate in PostgreSQL 16 for better performance" /><published>2023-04-11T17:39:00+00:00</published><updated>2023-04-11T17:39:00+00:00</updated><id>https://pashagolub.github.io/blog/2023/parallel-agregate</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/parallel-agregate/"><![CDATA[]]></content><author><name></name></author><category term="array_agg" /><category term="concurrency" /><category term="parallel" /><category term="aggregate" /><category term="performance" /><category term="postgresql" /><category term="what&apos;s new" /><summary type="html"><![CDATA[A new functionality for parallel aggregates on string_agg() and array_agg() functions is coming in PostgreSQL 16 with improved performance.]]></summary></entry></feed>