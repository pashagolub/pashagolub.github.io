<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://pashagolub.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://pashagolub.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-04-06T17:57:07+00:00</updated><id>https://pashagolub.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal page with the blog and CV.
</subtitle><entry><title type="html">New old “debug_parallel_query” setting in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/new-old-debug_parallel_query-setting-in-postgresql-16/" rel="alternate" type="text/html" title="New old “debug_parallel_query” setting in PostgreSQL 16" /><published>2023-03-28T09:00:44+00:00</published><updated>2023-03-28T09:00:44+00:00</updated><id>https://pashagolub.github.io/blog/2023/new-old-debug_parallel_query-setting-in-postgresql-16</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/new-old-debug_parallel_query-setting-in-postgresql-16/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Naming variables Why will force_parallel_mode &#8211; the runtime option be renamed to debug_parallel_query in PostgreSQL 16? Proper variable and function naming play a vital role in making code understandable, maintainable, and easily shareable. When we give our variables descriptive names that reflect their purpose, it becomes much simpler for others to understand our code, follow [&#8230;] The post New old &#8220;debug_parallel_query&#8221; setting in PostgreSQL 16 appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">pg_timetable v5.3 is out!</title><link href="https://pashagolub.github.io/blog/2023/pg_timetable-v53-is-out/" rel="alternate" type="text/html" title="pg_timetable v5.3 is out!" /><published>2023-03-15T10:00:12+00:00</published><updated>2023-03-15T10:00:12+00:00</updated><id>https://pashagolub.github.io/blog/2023/pg_timetable-v53-is-out</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/pg_timetable-v53-is-out/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Our team is proud to introduce a new pg_timetable v5.3 release! This time we focused solely on implementing new features for logging. I want to remind you that pg_timetable is a community project. So, please, don’t hesitate to ask any questions, to report bugs, to star the pg_timetable project, and to tell the world about [&#8230;] The post pg_timetable v5.3 is out! appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">ER diagrams with SQL and Mermaid</title><link href="https://pashagolub.github.io/blog/2023/er-diagrams-with-sql-and-mermaid/" rel="alternate" type="text/html" title="ER diagrams with SQL and Mermaid" /><published>2023-02-21T10:00:29+00:00</published><updated>2023-02-21T10:00:29+00:00</updated><id>https://pashagolub.github.io/blog/2023/er-diagrams-with-sql-and-mermaid</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/er-diagrams-with-sql-and-mermaid/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[What does ER stand for? An Entity Relationship (ER) diagram is one of the most important tools for database design. It helps you visualize the relationships between different entities and how they interact with each other. Many GUI tools have their own tools to build ER diagrams, e.g. pgAdmin IV, DBeaver, etc. In this blog [&#8230;] The post ER diagrams with SQL and Mermaid appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">Go &amp;amp; PostgreSQL: FOSDEM 2023 talk</title><link href="https://pashagolub.github.io/blog/2023/go-postgresql-fosdem-2023-talk/" rel="alternate" type="text/html" title="Go &amp;amp; PostgreSQL: FOSDEM 2023 talk" /><published>2023-02-15T10:00:41+00:00</published><updated>2023-02-15T10:00:41+00:00</updated><id>https://pashagolub.github.io/blog/2023/go--postgresql-fosdem-2023-talk</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/go-postgresql-fosdem-2023-talk/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Intro On the 5th of February 2023, I had the privilege of giving a talk at the PostgreSQL devroom during FOSDEM 2023 titled &#8220;When it all GOes right.&#8221; My talk focused on the process of creating programs in the Go language using a PostgreSQL database. It was an incredible opportunity to share my insights and [&#8230;] The post Go &amp; PostgreSQL: FOSDEM 2023 talk appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">Reserve connections in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2023/reserve-connections-in-postgresql-16/" rel="alternate" type="text/html" title="Reserve connections in PostgreSQL 16" /><published>2023-02-07T10:00:16+00:00</published><updated>2023-02-07T10:00:16+00:00</updated><id>https://pashagolub.github.io/blog/2023/reserve-connections-in-postgresql-16</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/reserve-connections-in-postgresql-16/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[Reserve connections for the pg_use_reserved_connections group in PostgreSQL 16 Nathan Bossart implemented a brand-new patch that provides a way to reserve connection slots for non-superusers. The patch was reviewed by Tushar Ahuja and Robert Haas. Committed by Robert Haas. The commit message is: Let&#8217;s try reserve connections in our work! Let&#8217;s edit the postgresql.conf file [&#8230;] The post Reserve connections in PostgreSQL 16 appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">usql: universal psql?</title><link href="https://pashagolub.github.io/blog/2023/usql-universal-psql/" rel="alternate" type="text/html" title="usql: universal psql?" /><published>2023-01-17T10:00:50+00:00</published><updated>2023-01-17T10:00:50+00:00</updated><id>https://pashagolub.github.io/blog/2023/usql-universal-psql</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/usql-universal-psql/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[usql? But why? usql is a universal command-line interface for many database. But why are we still using CLI (command line utilities) in the 21st century? And what is wrong with psql? Despite the widespread availability and ease of use of GUI-based tools, many people still prefer to use command line utilities for a number [&#8230;] The post usql: universal psql? appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">hex, oct, bin integers in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2022/hex-oct-bin-integers-in-postgresql-16/" rel="alternate" type="text/html" title="hex, oct, bin integers in PostgreSQL 16" /><published>2022-12-22T11:27:34+00:00</published><updated>2022-12-22T11:27:34+00:00</updated><id>https://pashagolub.github.io/blog/2022/hex-oct-bin-integers-in-postgresql-16</id><content type="html" xml:base="https://pashagolub.github.io/blog/2022/hex-oct-bin-integers-in-postgresql-16/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[SQL and integer notations NEW in PostgreSQL 16 &#8211; support for non-decimal notation of integer constants! PostgreSQL already has powerful support for string constants, with E'\t', E'\011', E'\u0009' and U&#038;'\0009' all meaning the same thing (a &#8220;horizontal tab&#8221; character). However, PostgreSQL&#8217;s support for numerical constants has &#8211; up until now &#8211; been rather limited; it [&#8230;] The post hex, oct, bin integers in PostgreSQL 16 appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">pg_dump compression specifications in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2022/pg_dump-compression-specifications-in-postgresql-16/" rel="alternate" type="text/html" title="pg_dump compression specifications in PostgreSQL 16" /><published>2022-12-13T10:00:18+00:00</published><updated>2022-12-13T10:00:18+00:00</updated><id>https://pashagolub.github.io/blog/2022/pg_dump-compression-specifications-in-postgresql-16</id><content type="html" xml:base="https://pashagolub.github.io/blog/2022/pg_dump-compression-specifications-in-postgresql-16/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[What is pg_dump compression? pg_dump is a PostgreSQL utility for backing up a local or remote PostgreSQL database. It creates a logical backup file that contains either plain SQL commands for recreating the database, or a binary file that can be restored with the pg_restore utility. The binary backup file can be used to restore [&#8230;] The post pg_dump compression specifications in PostgreSQL 16 appeared first on CYBERTEC.]]></summary></entry><entry><title type="html">FOO BOO a post with giscus comments</title><link href="https://pashagolub.github.io/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="FOO BOO a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://pashagolub.github.io/blog/2022/giscus-comments</id><content type="html" xml:base="https://pashagolub.github.io/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">GRANT VACUUM, ANALYZE in PostgreSQL 16</title><link href="https://pashagolub.github.io/blog/2022/grant-vacuum-analyze-in-postgresql-16/" rel="alternate" type="text/html" title="GRANT VACUUM, ANALYZE in PostgreSQL 16" /><published>2022-11-30T10:00:13+00:00</published><updated>2022-11-30T10:00:13+00:00</updated><id>https://pashagolub.github.io/blog/2022/grant-vacuum-analyze-in-postgresql-16</id><content type="html" xml:base="https://pashagolub.github.io/blog/2022/grant-vacuum-analyze-in-postgresql-16/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[What is GRANT VACUUM, ANALYZE? PostgreSQL uses table VACUUM and ANALYZE commands to optimize the database. The VACUUM command reclaims storage space and makes it available for re-use. It also updates the visibility map, which helps the query planner to quickly identify which parts of the table have live rows. The ANALYZE command collects statistics [&#8230;] The post GRANT VACUUM, ANALYZE in PostgreSQL 16 appeared first on CYBERTEC.]]></summary></entry></feed>