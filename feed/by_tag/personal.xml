<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://pashagolub.github.io/feed/by_tag/personal.xml" rel="self" type="application/atom+xml" /><link href="https://pashagolub.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-20T14:03:34+00:00</updated><id>https://pashagolub.github.io/feed/by_tag/personal.xml</id><title type="html">blank</title><subtitle>A personal page with the blog and CV.
</subtitle><entry><title type="html">Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!</title><link href="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/" rel="alternate" type="text/html" title="Announcing pgxmock v3 - Elevating Mocking for PostgreSQL in Go!" /><published>2023-09-20T12:10:19+00:00</published><updated>2023-09-20T12:10:19+00:00</updated><id>https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/announcing-pgxmock-v3/"><![CDATA[<p>I am thrilled to introduce the much-anticipated major release of <strong><a href="https://github.com/pashagolub/pgxmock/releases/tag/v3.0.0">pgxmock v3</a></strong>! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.</p>

<p>Hereâ€™s a quick overview of the exciting changes and additions in this release:</p>

<h2 id="high-priority-new-features">High-Priority New Features</h2>

<h3 id="rewrite-with-findexpectationfunc">Rewrite with <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code></h3>
<p>Iâ€™ve completely overhauled the internals of <code class="language-plaintext highlighter-rouge">pgxmock</code> by rewriting all methods using <code class="language-plaintext highlighter-rouge">findExpectationFunc()</code>. This improvement allows us to add even more custom expectations without writing a duplicate code. The only thing we will need is a custom callback function to compare a new kind of expectation.</p>

<h3 id="enhanced-expectations">Enhanced Expectations</h3>
<p>Iâ€™ve expanded the capabilities of <strong>all</strong> expectations with new methods like <code class="language-plaintext highlighter-rouge">WillDelayFor()</code>, <code class="language-plaintext highlighter-rouge">WillReturnError()</code>, and <code class="language-plaintext highlighter-rouge">WillPanic()</code>. Now you have even more control over how your mock database behaves in various scenarios.</p>

<h3 id="introducing-times-and-maybe">Introducing <code class="language-plaintext highlighter-rouge">Times()</code> and <code class="language-plaintext highlighter-rouge">Maybe()</code></h3>
<p>Iâ€™m introducing the <code class="language-plaintext highlighter-rouge">Times()</code> method, allowing you to specify how many times an expectation should be met. This feature enhances the flexibility of your mock database interactions. Meanwhile <code class="language-plaintext highlighter-rouge">Maybe()</code> method allows the expectation to be optional. Not calling an optional method will not cause an error while asserting expectations.</p>

<h2 id="new-features">New Features</h2>

<h3 id="improved-test-coverage-">Improved Test Coverage <a href="https://coveralls.io/github/pashagolub/pgxmock?branch=master"><img src="https://coveralls.io/repos/github/pashagolub/pgxmock/badge.svg?branch=master" alt="Coverage Status" /></a></h3>
<p>Iâ€™ve extended test coverage, ensuring that <code class="language-plaintext highlighter-rouge">pgxmock</code> remains a reliable choice for your testing needs. To make the testing even more comprehensive, Iâ€™ve added several new test cases, e.g., <code class="language-plaintext highlighter-rouge">TestRowsConn()</code> and <code class="language-plaintext highlighter-rouge">TestPanic()</code>. These scenarios cover a wider range of potential use cases. They will help us to eliminate possible bugs in the future.</p>

<h3 id="keeping-up-with-the-times">Keeping Up with the Times</h3>
<p>Iâ€™m staying up-to-date with the latest developments. In this release, Iâ€™ve bumped up the Go version to v1.21, ensuring compatibility and leveraging the newest features of the language.</p>

<h3 id="introducing-callmodifier-interface">Introducing CallModifier Interface</h3>
<p>Iâ€™ve introduced the <code class="language-plaintext highlighter-rouge">CallModifier</code> interface to expectations, providing greater control and customization when working with mock database calls. All expectations currently support common behavior modifiers, like delay, error, and panic. We can extend the list later with ease.</p>

<h2 id="ready-to-upgrade">Ready to Upgrade?</h2>

<p>I encourage all users to upgrade to <strong>pgxmock v3</strong> to take advantage of these exciting enhancements and improvements. Whether youâ€™re a long-time user or just getting started with pgxmock, these changes will elevate your database mocking experience to new heights.</p>

<p>To get started with pgxmock v3, simply update your import statement:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/pashagolub/pgxmock/v3"</span>
</code></pre></div></div>

<p>and/or run</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/pashagolub/pgxmock/v3
</code></pre></div></div>

<p>Thank you for your continued support and feedback. I look forward to seeing how <strong>pgxmock v3</strong> empowers your PostgreSQL database testing. If you have any questions or need assistance with the upgrade, feel free to reach out to me on <a href="https://github.com/pashagolub/pgxmock">GitHub</a>.</p>

<p>Happy mocking!</p>

<p>Truly yours,
Pavlo Golub<br />
Author of <strong>pgxmock</strong> ðŸ’™ðŸ’›</p>]]></content><author><name></name></author><category term="golang" /><category term="pgxmock" /><category term="what&apos;s new" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[I am thrilled to introduce the much-anticipated major release of pgxmock v3! This release represents a significant leap forward in enhancing your PostgreSQL database mocking experience in Go.]]></summary></entry><entry><title type="html">Indexing `LIKE` Filters</title><link href="https://pashagolub.github.io/blog/2023/indexing-like-filters/" rel="alternate" type="text/html" title="Indexing `LIKE` Filters" /><published>2023-09-08T13:40:16+00:00</published><updated>2023-09-08T13:40:16+00:00</updated><id>https://pashagolub.github.io/blog/2023/indexing-like-filters</id><content type="html" xml:base="https://pashagolub.github.io/blog/2023/indexing-like-filters/"><![CDATA[<p><a href="https://postgresql.life/post/markus_winand/">Markus Winand</a> wrote a <a href="https://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning">great article</a> about why and how users should use <code class="language-plaintext highlighter-rouge">LIKE</code> operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.</p>]]></content><author><name></name></author><category term="index" /><category term="FTS" /><category term="tips and tricks" /><category term="postgresql" /><category term="personal" /><summary type="html"><![CDATA[Markus Winand wrote a great article about why and how users should use LIKE operator in their workloads. It covers different approaches like Full-Text Search, Partial Index, Trigram Index, Materialized View, and query optimization. In summary, the talk primarily addresses challenges related to optimizing queries with leading wildcard LIKE searches and provides various strategies and techniques to overcome these challenges and improve database query performance.]]></summary></entry><entry><title type="html">hello world</title><link href="https://pashagolub.github.io/blog/2015/hello-world/" rel="alternate" type="text/html" title="hello world" /><published>2015-03-15T16:40:16+00:00</published><updated>2015-03-15T16:40:16+00:00</updated><id>https://pashagolub.github.io/blog/2015/hello-world</id><content type="html" xml:base="https://pashagolub.github.io/blog/2015/hello-world/"><![CDATA[<p>Welcome to my new blog! My name is <a href="https://postgresql.life/post/pavlo_golub/">Pavlo Golub</a>, and I have been working with PostgreSQL since 2002 when the version was 7.3. As a PostgreSQL developer and consultant, I am excited to share my insights and experiences with you through this personal blog that is not connected with my current or future employer.</p>

<p>Thanks for checking out my blog, <strong>random pg scribbles</strong>. So, you might be wondering what that title means. The <strong>pg</strong> in the title stands for both <strong>PostgreSQL</strong>, the open-source database management system, and <strong>Pavlo Golub</strong> - thatâ€™s me! Basically, this blog is all about my exploration of the PostgreSQL database management system, which is often referred to as â€˜Postgresâ€™ for short. I use the term <strong>scribbles</strong> to convey the idea that the content here is somewhat informal and experimental. Iâ€™m not trying to write highly polished, fully-formed articles - instead, Iâ€™m sharing my thoughts and findings about Postgres in a more free-form, improvisational way.</p>

<p>As for the <strong>random</strong> part, that just means that the content of this blog isnâ€™t necessarily organized around a specific theme or topic. I might write about different features of Postgres, share tips and tricks for using the software, or just muse on the broader database industry. The idea is that this blog is a space for me to explore my own interests and experiences with Postgres, and to share my thoughts with anyone else who might find them interesting. So if youâ€™re into databases, or just enjoy reading the musings of a Postgres enthusiast, then stick around - thereâ€™s plenty of random postgres scribbles to come!</p>]]></content><author><name></name></author><category term="personal" /><summary type="html"><![CDATA[Welcome to my new blog!]]></summary></entry></feed>